// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace main {
class ARequest;
struct ARequestDefaultTypeInternal;
extern ARequestDefaultTypeInternal _ARequest_default_instance_;
class AResponse;
struct AResponseDefaultTypeInternal;
extern AResponseDefaultTypeInternal _AResponse_default_instance_;
}  // namespace main
PROTOBUF_NAMESPACE_OPEN
template<> ::main::ARequest* Arena::CreateMaybeMessage<::main::ARequest>(Arena*);
template<> ::main::AResponse* Arena::CreateMaybeMessage<::main::AResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace main {

// ===================================================================

class ARequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:main.ARequest) */ {
 public:
  inline ARequest() : ARequest(nullptr) {}
  virtual ~ARequest();
  explicit constexpr ARequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ARequest(const ARequest& from);
  ARequest(ARequest&& from) noexcept
    : ARequest() {
    *this = ::std::move(from);
  }

  inline ARequest& operator=(const ARequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ARequest& operator=(ARequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ARequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ARequest* internal_default_instance() {
    return reinterpret_cast<const ARequest*>(
               &_ARequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ARequest& a, ARequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ARequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ARequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ARequest* New() const final {
    return CreateMaybeMessage<ARequest>(nullptr);
  }

  ARequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ARequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ARequest& from);
  void MergeFrom(const ARequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ARequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.ARequest";
  }
  protected:
  explicit ARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestValueFieldNumber = 1,
  };
  // string RequestValue = 1;
  void clear_requestvalue();
  const std::string& requestvalue() const;
  void set_requestvalue(const std::string& value);
  void set_requestvalue(std::string&& value);
  void set_requestvalue(const char* value);
  void set_requestvalue(const char* value, size_t size);
  std::string* mutable_requestvalue();
  std::string* release_requestvalue();
  void set_allocated_requestvalue(std::string* requestvalue);
  private:
  const std::string& _internal_requestvalue() const;
  void _internal_set_requestvalue(const std::string& value);
  std::string* _internal_mutable_requestvalue();
  public:

  // @@protoc_insertion_point(class_scope:main.ARequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class AResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:main.AResponse) */ {
 public:
  inline AResponse() : AResponse(nullptr) {}
  virtual ~AResponse();
  explicit constexpr AResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AResponse(const AResponse& from);
  AResponse(AResponse&& from) noexcept
    : AResponse() {
    *this = ::std::move(from);
  }

  inline AResponse& operator=(const AResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AResponse& operator=(AResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AResponse* internal_default_instance() {
    return reinterpret_cast<const AResponse*>(
               &_AResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AResponse& a, AResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AResponse* New() const final {
    return CreateMaybeMessage<AResponse>(nullptr);
  }

  AResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AResponse& from);
  void MergeFrom(const AResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "main.AResponse";
  }
  protected:
  explicit AResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseValueFieldNumber = 1,
  };
  // string ResponseValue = 1;
  void clear_responsevalue();
  const std::string& responsevalue() const;
  void set_responsevalue(const std::string& value);
  void set_responsevalue(std::string&& value);
  void set_responsevalue(const char* value);
  void set_responsevalue(const char* value, size_t size);
  std::string* mutable_responsevalue();
  std::string* release_responsevalue();
  void set_allocated_responsevalue(std::string* responsevalue);
  private:
  const std::string& _internal_responsevalue() const;
  void _internal_set_responsevalue(const std::string& value);
  std::string* _internal_mutable_responsevalue();
  public:

  // @@protoc_insertion_point(class_scope:main.AResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responsevalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ARequest

// string RequestValue = 1;
inline void ARequest::clear_requestvalue() {
  requestvalue_.ClearToEmpty();
}
inline const std::string& ARequest::requestvalue() const {
  // @@protoc_insertion_point(field_get:main.ARequest.RequestValue)
  return _internal_requestvalue();
}
inline void ARequest::set_requestvalue(const std::string& value) {
  _internal_set_requestvalue(value);
  // @@protoc_insertion_point(field_set:main.ARequest.RequestValue)
}
inline std::string* ARequest::mutable_requestvalue() {
  // @@protoc_insertion_point(field_mutable:main.ARequest.RequestValue)
  return _internal_mutable_requestvalue();
}
inline const std::string& ARequest::_internal_requestvalue() const {
  return requestvalue_.Get();
}
inline void ARequest::_internal_set_requestvalue(const std::string& value) {
  
  requestvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ARequest::set_requestvalue(std::string&& value) {
  
  requestvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:main.ARequest.RequestValue)
}
inline void ARequest::set_requestvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:main.ARequest.RequestValue)
}
inline void ARequest::set_requestvalue(const char* value,
    size_t size) {
  
  requestvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:main.ARequest.RequestValue)
}
inline std::string* ARequest::_internal_mutable_requestvalue() {
  
  return requestvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ARequest::release_requestvalue() {
  // @@protoc_insertion_point(field_release:main.ARequest.RequestValue)
  return requestvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ARequest::set_allocated_requestvalue(std::string* requestvalue) {
  if (requestvalue != nullptr) {
    
  } else {
    
  }
  requestvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:main.ARequest.RequestValue)
}

// -------------------------------------------------------------------

// AResponse

// string ResponseValue = 1;
inline void AResponse::clear_responsevalue() {
  responsevalue_.ClearToEmpty();
}
inline const std::string& AResponse::responsevalue() const {
  // @@protoc_insertion_point(field_get:main.AResponse.ResponseValue)
  return _internal_responsevalue();
}
inline void AResponse::set_responsevalue(const std::string& value) {
  _internal_set_responsevalue(value);
  // @@protoc_insertion_point(field_set:main.AResponse.ResponseValue)
}
inline std::string* AResponse::mutable_responsevalue() {
  // @@protoc_insertion_point(field_mutable:main.AResponse.ResponseValue)
  return _internal_mutable_responsevalue();
}
inline const std::string& AResponse::_internal_responsevalue() const {
  return responsevalue_.Get();
}
inline void AResponse::_internal_set_responsevalue(const std::string& value) {
  
  responsevalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AResponse::set_responsevalue(std::string&& value) {
  
  responsevalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:main.AResponse.ResponseValue)
}
inline void AResponse::set_responsevalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  responsevalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:main.AResponse.ResponseValue)
}
inline void AResponse::set_responsevalue(const char* value,
    size_t size) {
  
  responsevalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:main.AResponse.ResponseValue)
}
inline std::string* AResponse::_internal_mutable_responsevalue() {
  
  return responsevalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AResponse::release_responsevalue() {
  // @@protoc_insertion_point(field_release:main.AResponse.ResponseValue)
  return responsevalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AResponse::set_allocated_responsevalue(std::string* responsevalue) {
  if (responsevalue != nullptr) {
    
  } else {
    
  }
  responsevalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responsevalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:main.AResponse.ResponseValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace main

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2eproto
