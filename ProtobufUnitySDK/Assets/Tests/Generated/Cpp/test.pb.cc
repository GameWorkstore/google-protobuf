// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace main {
constexpr NewMessege::NewMessege(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : newfield_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NewMessegeDefaultTypeInternal {
  constexpr NewMessegeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewMessegeDefaultTypeInternal() {}
  union {
    NewMessege _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewMessegeDefaultTypeInternal _NewMessege_default_instance_;
}  // namespace main
namespace main {

// ===================================================================

class NewMessege::_Internal {
 public:
};

NewMessege::NewMessege(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:main.NewMessege)
}
NewMessege::NewMessege(const NewMessege& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  newfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newfield().empty()) {
    newfield_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newfield(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:main.NewMessege)
}

void NewMessege::SharedCtor() {
newfield_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NewMessege::~NewMessege() {
  // @@protoc_insertion_point(destructor:main.NewMessege)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void NewMessege::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  newfield_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewMessege::ArenaDtor(void* object) {
  NewMessege* _this = reinterpret_cast< NewMessege* >(object);
  (void)_this;
}
void NewMessege::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewMessege::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewMessege::Clear() {
// @@protoc_insertion_point(message_clear_start:main.NewMessege)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newfield_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* NewMessege::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string NewField = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_newfield();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewMessege::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:main.NewMessege)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string NewField = 1;
  if (this->newfield().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newfield().data(), static_cast<int>(this->_internal_newfield().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "main.NewMessege.NewField");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newfield(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:main.NewMessege)
  return target;
}

size_t NewMessege::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:main.NewMessege)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string NewField = 1;
  if (this->newfield().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newfield());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewMessege::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NewMessege*>(
      &from));
}

void NewMessege::MergeFrom(const NewMessege& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:main.NewMessege)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.newfield().size() > 0) {
    _internal_set_newfield(from._internal_newfield());
  }
}

void NewMessege::CopyFrom(const NewMessege& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:main.NewMessege)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMessege::IsInitialized() const {
  return true;
}

void NewMessege::InternalSwap(NewMessege* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  newfield_.Swap(&other->newfield_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string NewMessege::GetTypeName() const {
  return "main.NewMessege";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace main
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::main::NewMessege* Arena::CreateMaybeMessage< ::main::NewMessege >(Arena* arena) {
  return Arena::CreateMessageInternal< ::main::NewMessege >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
